<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_upx_kql_5gb">
    <title>TW</title>
    <shortdesc></shortdesc>
    <conbody>
        <p>For writing End-User Tests in SQLScript, the already existing mechanism of libraries in
            SQLScript will be re-used. To specify that a library contains End-User Tests, the new
            language type SQLSCRIPT TEST has been introduced which can only be used for libraries at
            the moment. To ensure a clear separation between productive and test-only coding,
            libraries of that language type cannot be used in any other function, procedure or
            library which is not of language type SQLSCRIPT TEST.</p>
        <table id="table_bsx_vxl_5gb">
            <tgroup cols="1">
                <colspec colnum="1" colname="col1"/>
                <tbody>
                    <row>
                        <entry>CREATE LIBRARY LIB_TEST LANGUAGE SQLSCRIPT TEST AS BEGIN &lt;body>
                            END;</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <p>Within the body of such a test library, certain new SQLScript pragmas can be used to mark
            a library member procedure to be a test or test-related coding: @Test(), @TestSetup(),
            @TestTeardown(), @TestSetupConfig('ConfigName'), @TestTeardownConfig('ConfigName'),
            @TestSetupLibrary() as well as @TestTearDownLibrary(). Those pragmas are only supported
            for library member procedures and the procedures must not have any parameters.</p>
        <p>Note that all of these pragmas are optional and not required by default within a
            SQLSCRIPT TEST library. But to enable a library member procedure to be invoked as
            End-User Test by the SQLScript Test-Framework, at least the @Test() pragma is
            required.</p>
        <table id="table_dsx_vxl_5gb">
            <tgroup cols="1">
                <colspec colnum="1" colname="col1"/>
                <tbody>
                    <row>
                        <entry>
                            <pre>CREATE LIBRARY LIB_TEST LANGUAGE SQLSCRIPT TEST AS
BEGIN
    @TestSetUpLibrary()
    public procedure SetUpLibrary() as
    begin
        select 'SetUpLibrary' from dummy;
    end;

    @TestTearDownLibrary()
    public procedure TearDownLibrary() as
    begin
        select 'whatever' from dummy;
    end;

    @TestSetUpConfig('config1')
    public procedure SetUpConfig1() as
    begin
        truncate table tab_test;
        insert into tab_test values(1, 'first entry');
        insert into tab_test values(2, 'second entry');
        insert into tab_test values(3, 'third entry');
    end;

    @TestSetUpConfig('config2')
    public procedure SetUpConfig2() as
    begin
        truncate table tab_test;
        insert into tab_test values(5, 'fifth entry');
        insert into tab_test values(6, 'sixth entry');
        insert into tab_test values(7, 'seventh entry');
    end;

    @TestSetUpConfig('config3')
    public procedure SetUpConfig3() as
    begin
        truncate table tab_test;
        insert into tab_test values(5, 'some pattern string');
    end;

    @TestTearDownConfig('config1', 'config2', 'config3')
    public procedure TearDownConfig() as
    begin
        truncate table tab_test;
    end;

    @TestSetUpTest()
    public procedure SetUpTest() as
    begin
        using sqlscript_test as testing;
        declare num_entries int = record_count(tab_test);
        testing:expect_ne(0, num_entries);
    end;

    @TestTearDownTest()
    public procedure TearDownTest() as
    begin
        select 'whatever' from dummy;
    end;

    @Test()
    public procedure TestA as
    begin
        using sqlscript_test as testing;
        tab1 = select 'A1' as A from dummy;
        tab2 = select 'A2' as A from dummy;
        testing:expect_table_eq(:tab1, :tab2);
    end;

    @Test()
    public procedure TestC as
    begin
        using sqlscript_test as testing;
        declare str nclob;
        call proc_test(:str);
        testing:expect_eq('some replaced string', :str);
    end;
END;</pre>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <p>To run the example SQLSCRIPT TEST library above, one would also need an object to be
            tested, for example follwoing procedure:</p>
        <table id="table_isx_vxl_5gb">
            <tgroup cols="1">
                <colspec colnum="1" colname="col1"/>
                <tbody>
                    <row>
                        <entry>
                            <pre>CREATE TABLE TAB_TEST(A INT, B NCLOB);

CREATE PROCEDURE PROC_TEST(OUT result VARCHAR(20)) AS
BEGIN
    DECLARE str STRING;
    SELECT B INTO str FROM TAB_TEST WHERE A = 5;
    IF LOCATE(:str, 'pattern') &lt;> 0 THEN
        result = REPLACE(:str, 'pattern', 'replaced');
    ELSE
        result = :str;
    END IF;
END;</pre>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <p>When invoking End-User Tests, the SQLScript Test-Framework will only consider member
            procedures of a SQLSCRIPT TEST library which are each marked with one of the pragmas
            mentioned above. Nonetheless, it is still possible to have additional member functions
            or procedures in such a library without any pragmas. These could then serve as helpers
            or be used to separate common coding.</p>
        <p>The order of execution of library member procedures having these pragmas is defined as
            follows:</p>
        <ol id="ol_ksx_vxl_5gb">
            <li> @TestSetupLibrary()</li>
            <li> @TestSetupConfig('Config1')</li>
            <li> @TestSetup()</li>
            <li> @Test()</li>
            <li> @TestTeardown()</li>
            <li> @TestSetUp()</li>
            <li> @Test()</li>
            <li> @TestTeardown()</li>
            <li> [...]</li>
            <li> @TestTeardownConfig('Config1')</li>
            <li> @TestSetupConfig('Config2')</li>
            <li> @TestSetup()</li>
            <li> @Test()</li>
            <li> @TestTeardown()</li>
            <li> @TestSetUp()</li>
            <li> @Test()</li>
            <li> @TestTeardown()</li>
            <li> [...]</li>
            <li> @TestTeardownConfig('Config2')</li>
            <li> [...]</li>
            <li> @TestTeardownLibrary()</li>
        </ol>
        <p>Be reminded that in case the execution of a library member procedure having one of the
            SetUp pragmas fail, the corresponding TearDown as well as test(s) will not be
            executed.</p>
        <section id="section_usx_vxl_5gb">
            <title>Invoking End-User Tests</title>
            <p>The entry point of the End-User Test-Framework in SQLScript is the built-in procedure
                SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA. As the name already indicates, the tests
                will be run on the existing data in the system. That means that users have to be
                very careful when writing tests that change or delete objects or data in the system
                since others might be influenced by these changes. Thus, tests themselves can also
                be influenced by other tests running in parallel in the same system. Additionally,
                users do not have the EXECUTE privilege for the built-in procedure
                SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA by default. Each user would have to get
                this privilege granted by someone else (e.g. SYSTEM user) first.</p>
            <p>To invoke End-User Tests in the SQLScript Test-Framework, the following CALL
                statement has to be executed.</p>
            <table id="table_vsx_vxl_5gb">
                <tgroup cols="1">
                    <colspec colnum="1" colname="col1"/>
                    <tbody>
                        <row>
                            <entry>
                                <pre>CALL SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA('&lt;json_string>', ?, ?, ?)</pre>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>The first parameter of SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA specifies the
                testplan to be executed and has to be provided in JSON format. The testplan
                specifies which tests shall be run and in which configurations they shall be run.
                Furthermore, the testplan also contains information about which test libraries are
                to be executed by the Test-Framework. Note that also wildcards can be used to
                specify values in the json string ('*' for multiple wildcard characters, '?' for
                exactly one wildcard character). Some simple examples would look as follows.</p>
            <table id="table_xsx_vxl_5gb">
                <tgroup cols="1">
                    <colspec colnum="1" colname="col1"/>
                    <tbody>
                        <row>
                            <entry>
                                <pre>CALL SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA('{"schema":"MY_SCHEMA","library":"*"}', ?, ?, ?)
CALL SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA('{"schema":"MY_SCHEMA","library":"LIB*TEST"}', ?, ?, ?)
CALL SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA('[{"schema":"MY_SCHEMA","library":"SOME_PREFIX_*"},{"schema":"OTHER_SCHEMA","library":"*_SOME_SUFFIX"}]', ?, ?, ?)</pre>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>The first call to SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA will run all tests (in all
                their configurations respectively) of all libraries with language type SQLSCRIPT
                TEST in schema MY_SCHEMA. The second call will do the same but applies a filter to
                the libraries which are to be executed. Here, only SQLSCRIPT TEST libraries having a
                name starting with 'LIB' and ending with 'TEST' will be executed by the
                Test-Framework. For the third call, also libraries with language type SQLSCRIPT TEST
                in schema OTHER_SCHEMA will be executed but their name has to end with
                '_SOME_SUFFIX'.</p>
            <p>The complete definition of what can be provided in the testplan's JSON string is
                depicted below.</p>
            <table id="table_zsx_vxl_5gb">
                <tgroup cols="1">
                    <colspec colnum="1" colname="col1"/>
                    <tbody>
                        <row>
                            <entry>
                                <pre>&lt;test_plan> ::= &lt;lib_spec> || &lt;lib_spec_list>

&lt;lib_spec_list> ::= '[' &lt;lib_spec> [',' &lt;lib_spec>] ']'

&lt;lib_spec> ::= '{' ["schema":"' &lt;wildcard_pattern> '",] "library":"' &lt;wildcard_pattern> '"' [', "run":' &lt;run_spec_list>] '}'

&lt;run_spec_list> ::= '[' &lt;run_spec> [',' &lt;run_spec>] ']'

&lt;run_spec> ::= '{' &lt;run_spec_member> [',' &lt;run_spec_member] '}'

&lt;run_spec_member> ::= [ '"tests":[' &lt;wildcard_pattern_list> ']' || '"configurations":[' &lt;wildcard_pattern_list> ']' || '"exclude-tests":[' &lt;wildcard_pattern_list> ']' || '"exclude-configurations":[' &lt;wildcard_pattern_list> ']' ]

&lt;wildcard_pattern_list> ::= '"' &lt;wildcard_pattern> '"' [', "' &lt;wildcard_pattern> '"']

&lt;wildcard_pattern> ::= letter_or_digit_or_asteriks+</pre>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>Note that &lt;wildcard_pattern> is always case-sensitive.</p>
            <p>Examples:</p>
            <table id="table_btx_vxl_5gb">
                <tgroup cols="1">
                    <colspec colnum="1" colname="col1"/>
                    <tbody>
                        <row>
                            <entry>
                                <pre>[{
    "schema":"MY_SCHEMA",
    "library":"*"
},
{
    "library": "MY_LIB",
    "run": [{
        "exclude-tests": ["A", "B"],
        "configurations": ["config1", "config3"]
    },
    {
        "tests": ["A", "B"],
        "exclude-configurations": ["config2"]
    }]
},
{
    "schema": "MY_SCHEMA",
    "library": "*",
    "run": [{
        "tests": ["*TEST*KERNEL*"],
        "exclude-tests": ["DISABLED_*"],
        "exclude-configurations": ["*SCALE_OUT*"]
    },
    {
        "configurations": ["*SINGLE_NODE*", "*SCALE_OUT*"],
        "exclude-configurations": ["*STRESS_TEST*"]
    }]
}]</pre>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section id="section_ctx_vxl_5gb">
            <title>Behavior</title>
            <ul id="ul_dtx_vxl_5gb">
                <li>Invalid syntax or semantics result in an error.</li>
                <li>Unknown properties produce a warning.</li>
                <li>
                    <p>Property "library" is mandatory, but there are default values for other
                        properties:</p>
                    <p>
                        <ul id="ul_etx_vxl_5gb">
                            <li>If "schema" is not specified, current session schema will be
                                used.</li>
                            <li>If "run" is not specified, all configurations and tests will be
                                selected. i.e. identical to "run": [{ "tests": [ "*" ],
                                "configurations": [ "*" ] }].</li>
                        </ul>
                    </p>
                </li>
                <li>When "tests" and "exclude-tests" match exactly the same values, an error will be
                    thrown. Same applies to "configurations" and "exclude-configurations".</li>
                <li>When both "exclude-tests" and "tests" are given, "exclude-tests" will always
                    have higher precedence. Same applies to "exclude-configurations" and
                    "configurations".</li>
                <li>An empty testplan will be generated if the input does not match any tests and no
                    error will be thrown. Also no entries will be added to the output tables.</li>
            </ul>
            <p>Note that each entry in &lt;run_spec_list> will cause a separate list of tests and
                configurations to be added to the testplan depending on the values of the inner
                &lt;run_spec_member> entries. Thus, it could happen that some tests as well as
                configurations of the same library will be executed repeatedly by the
                Test-Framework.</p>
        </section>
        <section id="section_ftx_vxl_5gb">
            <title>Output</title>
            <p>The three output parameters of SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA have the
                following table structures.</p>
        </section>
        <b>1) results</b>
        <table id="table_gtx_vxl_5gb">
            <tgroup cols="3">
                <colspec colnum="1" colname="col1"/>
                <colspec colnum="2" colname="col2"/>
                <colspec colnum="3" colname="col3"/>
                <tbody>
                    <row>
                        <entry><u><b>Column name</b></u></entry>
                        <entry><u><b>Type</b></u></entry>
                        <entry><u><b>Description</b></u></entry>
                    </row>
                    <row>
                        <entry><b>SCHEMA_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Schema name</entry>
                    </row>
                    <row>
                        <entry><b>LIBRARY_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Library name</entry>
                    </row>
                    <row>
                        <entry><b>CONFIGURATION_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Configuration name</entry>
                    </row>
                    <row>
                        <entry><b>TEST_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Test name</entry>
                    </row>
                    <row>
                        <entry><b>TEST_EXECUTION_ID</b></entry>
                        <entry>BIGINT</entry>
                        <entry>Unique identifier for lookup in details output table</entry>
                    </row>
                    <row>
                        <entry><b>TEST_EXECUTION_TIME</b></entry>
                        <entry>BIGINT</entry>
                        <entry>Duration in microseconds</entry>
                    </row>
                    <row>
                        <entry><b>TEST_EXECUTION_MEMORY_SIZE</b></entry>
                        <entry>BIGINT</entry>
                        <entry>Memory size used during test execution (cf.
                            M_ACTIVE_PROCEDURES)</entry>
                    </row>
                    <row>
                        <entry><b>TEST_EXECUTION_RESULT_STATE</b></entry>
                        <entry>VARCHAR(16)</entry>
                        <entry>
                            <p>Test result</p>
                            <p>PASSED | FAILED | ERROR | SKIPPED | CANCELLED</p>
                        </entry>
                    </row>
                    <row>
                        <entry><b>TEST_COMMENTS</b></entry>
                        <entry>NVARCHAR(5000)</entry>
                        <entry>User-defined comment defined for corresponding member in test
                            library</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <b>2) details</b>
        <table id="table_otx_vxl_5gb">
            <tgroup cols="3">
                <colspec colnum="1" colname="col1"/>
                <colspec colnum="2" colname="col2"/>
                <colspec colnum="3" colname="col3"/>
                <tbody>
                    <row>
                        <entry><u><b>Column name</b></u></entry>
                        <entry><u><b>Type</b></u></entry>
                        <entry><u><b>Description</b></u></entry>
                    </row>
                    <row>
                        <entry><b>TEST_EXECUTION_ID</b></entry>
                        <entry>BIGINT</entry>
                        <entry>Identifier for particular test run</entry>
                    </row>
                    <row>
                        <entry><b>RESULT_DETAIL_ID</b></entry>
                        <entry>BIGINT</entry>
                        <entry>Unique identifier for lookup in callstacks output table</entry>
                    </row>
                    <row>
                        <entry><b>RESULT_DETAIL</b></entry>
                        <entry>NCLOB</entry>
                        <entry>Long text describing what failed / which error occurred during test
                            run</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <b>3) callstacks</b>
        <table id="table_utx_vxl_5gb">
            <tgroup cols="3">
                <colspec colnum="1" colname="col1"/>
                <colspec colnum="2" colname="col2"/>
                <colspec colnum="3" colname="col3"/>
                <tbody>
                    <row>
                        <entry><u><b>Column name</b></u></entry>
                        <entry><u><b>Type</b></u></entry>
                        <entry><u><b>Description</b></u></entry>
                    </row>
                    <row>
                        <entry><b>RESULT_DETAIL_ID</b></entry>
                        <entry>BIGINT</entry>
                        <entry>Identifier for particular callstack</entry>
                    </row>
                    <row>
                        <entry><b>FRAME_LEVEL</b></entry>
                        <entry>INTEGER</entry>
                        <entry>Level of callstack frame</entry>
                    </row>
                    <row>
                        <entry><b>DATABASE_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Database name</entry>
                    </row>
                    <row>
                        <entry><b>SCHEMA_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Schema name</entry>
                    </row>
                    <row>
                        <entry><b>OBJECT_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Object name</entry>
                    </row>
                    <row>
                        <entry><b>MEMBER_NAME</b></entry>
                        <entry>NVARCHAR(256)</entry>
                        <entry>Library member name</entry>
                    </row>
                    <row>
                        <entry><b>LINE</b></entry>
                        <entry>INTEGER</entry>
                        <entry>SQL line number</entry>
                    </row>
                    <row>
                        <entry><b>COLUMN</b></entry>
                        <entry>INTEGER</entry>
                        <entry>SQL column value</entry>
                    </row>
                    <row>
                        <entry><b>POSITION</b></entry>
                        <entry>INTEGER</entry>
                        <entry>SQL position value</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <section id="section_d5x_vxl_5gb">
            <title>Listing End-User Tests</title>
            <p>For checking which tests and configurations will be invoked by the Test-Framework
                when providing a certain JSON string as testplan description, the built-in library
                SYS.SQLSCRIPT_TEST contains two additional procedures:</p>
            <table id="table_e5x_vxl_5gb">
                <tgroup cols="1">
                    <colspec colnum="1" colname="col1"/>
                    <tbody>
                        <row>
                            <entry>
                                <pre>CALL SYS.SQLSCRIPT_TEST:LIST_TESTS('&lt;json_string>')
CALL SYS.SQLSCRIPT_TEST:LIST_CONFIGURATIONS('&lt;json_string>')</pre>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>Examples:</p>
            <table id="table_f5x_vxl_5gb">
                <tgroup cols="1">
                    <colspec colnum="1" colname="col1"/>
                    <tbody>
                        <row>
                            <entry>
                                <pre>CALL SYS.SQLSCRIPT_TEST:LIST_TESTS('{"schema":"MY_SCHEMA","library":"*"}', ?)
CALL SYS.SQLSCRIPT_TEST:LIST_TESTS('{"schema":"MY_SCHEMA","library":"LIB*TEST"}', ?)
CALL SYS.SQLSCRIPT_TEST:LIST_CONFIGURATIONS('[{"schema":"MY_SCHEMA","library":"SOME_PREFIX_*"},{"schema":"OTHER_SCHEMA","library":"*_SOME_SUFFIX"}]', ?)</pre>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>Both will return the following tabular output.</p>
            <table id="table_h5x_vxl_5gb">
                <tgroup cols="3">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2"/>
                    <colspec colnum="3" colname="col3"/>
                    <tbody>
                        <row>
                            <entry><b>Column name</b></entry>
                            <entry><b>Type</b></entry>
                            <entry><b>Description</b></entry>
                        </row>
                        <row>
                            <entry><b>SCHEMA_NAME</b></entry>
                            <entry>NVARCHAR(256)</entry>
                            <entry>Schema name</entry>
                        </row>
                        <row>
                            <entry><b>LIBRARY_NAME</b></entry>
                            <entry>NVARCHAR(256)</entry>
                            <entry>Library name</entry>
                        </row>
                        <row>
                            <entry><b>CONFIGURATION/TEST_NAME</b></entry>
                            <entry>NVARCHAR(256)</entry>
                            <entry>Configuration/Test name</entry>
                        </row>
                        <row>
                            <entry><b>COMMENTS</b></entry>
                            <entry>NCLOB</entry>
                            <entry>Description</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section id="section_m5x_vxl_5gb">
            <title>Matchers for End-User Tests</title>
            <p>Within SQLSCRIPT TEST libraries, certain procedures of the built-in library
                SYS.SQLSCRIPT_TEST can be used to verify results within End-User Tests.</p>
            <p>Currently, there are several matchers for scalar variables, one matcher for table
                variables and one that aborts the execution of the current test. The matchers for
                scalar variables are as follows:</p>
            <table id="table_n5x_vxl_5gb">
                <tgroup cols="2">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2"/>
                    <tbody>
                        <row>
                            <entry><u>Matcher Name</u></entry>
                            <entry><u>Description</u></entry>
                        </row>
                        <row>
                            <entry><b>EXPECT_EQ</b></entry>
                            <entry>checks that the inputs are equal</entry>
                        </row>
                        <row>
                            <entry><b>EXPECT_NE</b></entry>
                            <entry>checks that the inputs are not equal</entry>
                        </row>
                        <row>
                            <entry><b>EXPECT_GE</b></entry>
                            <entry>checks that the first input is greater than or equal to the
                                second input</entry>
                        </row>
                        <row>
                            <entry><b>EXPECT_GT</b></entry>
                            <entry>checks that the first input is greater than the second
                                input</entry>
                        </row>
                        <row>
                            <entry><b>EXPECT_LE</b></entry>
                            <entry>checks that the first input is less than or equal to the second
                                input</entry>
                        </row>
                        <row>
                            <entry><b>EXPECT_LT</b></entry>
                            <entry>checks that the first input is less than the second input</entry>
                        </row>
                        <row>
                            <entry><b>EXPECT_NULL</b></entry>
                            <entry>checks that the input is null</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>All scalar matchers (except for EXPECT_NULL) take exactly two scalar input arguments.
                The datatypes of these two inputs must be comparable in SQLScript. Most of the
                datatypes can be categorized in three classes: String types, Numeric types and Date
                types. While all types within the same class are comparable to each other, it is not
                possible to compare date and numeric types. String types can be compared to every
                other datatype but will be converted to the non-string type prior to the comparison.
                Whenever two different datatypes are compared, at least one of the inputs will be
                converted. When the conversion fails, it is considered a normal execution error
                instead of reporting a matcher failure.</p>
            <p>The table matcher (<b>EXPECT_TABLE_EQ</b>) however has three input arguments. Besides
                two table variables that should be compared there is a third optional input, namely
                IGNORE_ORDER. This parameter is TRUE by default and will compare the table variables
                without considering the order of rows. For example row 2 of the first input might
                match to row 5 of the second input. However, every row will be matched at most to
                one row in the other table variable. The two input table variables must have an
                equal number of columns and the columns must have same names. Furthermore, the
                datatypes of the columns have to be comparable as well. If the types of the table
                columns are different, one of the columns will be converted before the comparison.
                Unlike for scalar comparisons, it will not lead to a runtime error if such a
                conversion fails. Instead, the row will always be considered as mismatch. One
                additional difference to scalar matchers is the handling of NULL values. For scalar
                matchers, anything compared to NULL is false (even NULL). The table matcher however
                considers NULL to be equal to NULL.</p>
            <p>In case a matcher fails, a human-readable output will be added to the 'details'
                output table of the built-in procedure SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA.
                Furthermore, a call-stack will be generated for such a matcher failure to make it
                possible to determine its exact code location. The table matcher will report a
                maximum of 100 row mismatches for the sake of readability.</p>
            <p>The built-in library SQLSCRIPT_TEST also contains a procedure named <b>FAIL</b>. This
                procedure will (similar to a matcher) add an entry to the 'details' output table of
                SYS.SQLSCRIPT_RUN_TESTS_ON_ORIGINAL_DATA whereby the error message that was provided
                as input argument to the procedure FAIL will be contained as message. Afterwards,
                this procedure will abort the execution of the current test. The subsequent tests
                will still be executed.</p>
            <p> </p>
        </section>
    </conbody>
</concept>
