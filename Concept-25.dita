<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_x3j_nkg_zgb">
    <title>SQL DML</title>
    <shortdesc></shortdesc>
    <conbody>
        <p>You can modify data in SQLScript table variables with SQL DML statements. The following
            statements are supported:</p>
        <ul id="ul_mq2_pkg_zgb">
            <li>INSERT</li>
            <li>UPDATE</li>
            <li>DELETE </li>
        </ul>
        <p>The syntax of the statements is identical with that for manipulating prsistent tables.
            The only difference is that you need to mark the variables by using a colon.</p>
        <codeblock>DECLARE lt TABLE (a INT, b VARCHAR(20));
INSERT INTO :lt VALUES (1, 'abc');
UPDATE :lt SET b = 'def' WHERE a = 1;
DELETE FROM :lt WHERE a = 1;</codeblock>
        <section id="section_vx5_nlg_zgb">
            <title>Constraints</title>
            <p>The DML statements for table variables support the following constraint checks:</p>
            <ul id="ul_j5q_vlg_zgb">
                <li>Primary key</li>
                <li>NOT NULL</li>
            </ul>
            <p>The constraints can be defined in both the user-defined table type and the
                declaration, similar to the persistent table
                definition.<codeblock>
CREATE TYPE tt AS TABLE (a INT PRIMARY KEY, b INT NOT NULL);

DECLARE lt1 tt; -- the variable has constraints defined by the table type
DECLARE lt2 TABLE (a INT, b INT, c INT NOT NULL, PRIMARY KEY(a, b));

</codeblock></p>
        </section>
        <section id="section_rtl_nlg_zgb"><title><b>Compatibility with other
                statements</b></title><p> orimplementation  it is not possible to combine DML
                statements with other table variable related statements for the same table variable.
                If a table variable is manipulated by a DML statement, it can only be used in SQL
                statements - this includes queries and sub-calls if the variable is bound to an
                input parameter. Moreover, it cannot be the target of any assign statement and
                therefore cannot be bound to an output parameter of a
                sub-call.<codeblock>DECLARE lt1 TABLE(a int);
DECLARE lt2 TABLE LIKE :lt1;
INSERT INTO :lt1 VALUES(1);
INSERT INTO :lt2 (SELECT * FROM :lt1); -- supported
SELECT * FROM :lt2; -- supported
CALL nested_proc(:lt2); -- supported only if the procedure parameter is IN
:lt1.INSERT(:lt2); -- not supported (INSERT operator)
lt2 = SELECT * FROM :lt1; -- not supported (assignment target)</codeblock></p><b>Example</b></section>
        <section id="section_hvw_mlg_zgb">
            <title/>
            <p/>
        </section>
    </conbody>
</concept>
